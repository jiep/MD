for(neurals in seq(1,10)){
min <- min.nn(x, y, 10, neurals)
# Curva ajustada con el menor error entre varias ejecuciones de la
# función nnet
predict.nn<-predict(min, as.matrix(x))
# Representamos la función predicha junto con la función original
if(neurals == 1)
neurals_plot <-  "neurona"
else
neurals_plot <- "neuronas"
plot(x,y, col=4, lwd=2, main=paste(neurals, neurals_plot))
points(x, predict.nn, type='l', col=2, lwd=2)
}
par(mai=c(0,0,0,0))
plot.new()
legend(x="center", ncol=2,legend=c("Función predicha", "Función original"),
fill=c("red","blue"), title="Leyenda", pch = c('-','o'))
nf<-layout(matrix(c(1,2,3,4,5,6,7,8,9,10,11,11,11,11,11), ncol=5, byrow=TRUE))
par(mai= rep(0.5, 4))
for(neurals in seq(1,10)){
min <- min.nn(x, y, 10, neurals)
# Curva ajustada con el menor error entre varias ejecuciones de la
# función nnet
predict.nn<-predict(min, as.matrix(x))
# Representamos la función predicha junto con la función original
if(neurals == 1)
neurals_plot <-  "neurona"
else
neurals_plot <- "neuronas"
plot(x,y, col=4, lwd=2, main=paste(neurals, neurals_plot))
points(x, predict.nn, type='l', col=2, lwd=2)
}
par(mai=c(0,0,0,0))
plot.new()
legend(x="center", ncol=2,legend=c("Función predicha", "Función original"),
fill=c("red","blue"), title="Leyenda", lty = c(1, NA), pch = c(NA, 8))
nf<-layout(matrix(c(1,2,3,4,5,6,7,8,9,10,11,11,11,11,11), ncol=5, byrow=TRUE))
par(mai= rep(0.5, 4))
for(neurals in seq(1,10)){
min <- min.nn(x, y, 10, neurals)
# Curva ajustada con el menor error entre varias ejecuciones de la
# función nnet
predict.nn<-predict(min, as.matrix(x))
# Representamos la función predicha junto con la función original
if(neurals == 1)
neurals_plot <-  "neurona"
else
neurals_plot <- "neuronas"
plot(x,y, col=4, lwd=2, main=paste(neurals, neurals_plot))
points(x, predict.nn, type='l', col=2, lwd=2)
}
par(mai=c(0,0,0,0))
plot.new()
legend(x="center", ncol=2,legend=c("Función predicha", "Función original"),
title="Leyenda", lty = c(1, NA), pch = c(NA, 8))
nf<-layout(matrix(c(1,2,3,4,5,6,7,8,9,10,11,11,11,11,11), ncol=5, byrow=TRUE))
par(mai= rep(0.5, 4))
for(neurals in seq(1,10)){
min <- min.nn(x, y, 10, neurals)
# Curva ajustada con el menor error entre varias ejecuciones de la
# función nnet
predict.nn<-predict(min, as.matrix(x))
# Representamos la función predicha junto con la función original
if(neurals == 1)
neurals_plot <-  "neurona"
else
neurals_plot <- "neuronas"
plot(x,y, col=4, lwd=2, main=paste(neurals, neurals_plot))
points(x, predict.nn, type='l', col=2, lwd=2)
}
par(mai=c(0,0,0,0))
plot.new()
legend(x="center", ncol=2,legend=c("Función predicha", "Función original"),
title="Leyenda", lty = c(1, NA), pch = c(NA, 8), col=c('red', 'blue'))
nf<-layout(matrix(c(1,2,3,4,5,6,7,8,9,10,11,11,11,11,11), ncol=5, byrow=TRUE))
par(mai= rep(0.5, 4))
for(neurals in seq(1,10)){
min <- min.nn(x, y, 10, neurals)
# Curva ajustada con el menor error entre varias ejecuciones de la
# función nnet
predict.nn<-predict(min, as.matrix(x))
# Representamos la función predicha junto con la función original
if(neurals == 1)
neurals_plot <-  "neurona"
else
neurals_plot <- "neuronas"
plot(x,y, col=4, lwd=2, main=paste(neurals, neurals_plot))
points(x, predict.nn, type='l', col=2, lwd=2)
}
par(mai=c(0,0,0,0))
plot.new()
legend(x="center", ncol=2,legend=c("Función predicha", "Función original"),
title="Leyenda", lty = c(1, NA), pch = c(NA, 'o'), col=c('red', 'blue'))
nf<-layout(matrix(c(1,2,3,4,5,6,7,8,9,10,11,11,11,11,11), ncol=5, byrow=TRUE))
par(mai= rep(0.5, 4))
for(neurals in seq(1,10)){
min <- min.nn(x, y, 10, neurals)
# Curva ajustada con el menor error entre varias ejecuciones de la
# función nnet
predict.nn<-predict(min, as.matrix(x))
# Representamos la función predicha junto con la función original
if(neurals == 1)
neurals_plot <-  "neurona"
else
neurals_plot <- "neuronas"
plot(x,y, col=4, lwd=2, main=paste(neurals, neurals_plot))
points(x, predict.nn, type='l', col=2, lwd=2)
}
par(mai=c(0,0,0,0))
plot.new()
legend(x="center", ncol=2,legend=c("Función predicha", "Función original"),
title="Leyenda", lty = c(1, NA), pch = c(NA, 'O'), col=c('red', 'blue'))
nf<-layout(matrix(c(1,2,3,4,5,6,7,8,9,10,11,11,11,11,11), ncol=5, byrow=TRUE))
par(mai= rep(0.2, 4))
for(neurals in seq(1,10)){
min <- min.nn(x, y, 10, neurals)
# Curva ajustada con el menor error entre varias ejecuciones de la
# función nnet
predict.nn<-predict(min, as.matrix(x))
# Representamos la función predicha junto con la función original
if(neurals == 1)
neurals_plot <-  "neurona"
else
neurals_plot <- "neuronas"
plot(x,y, col=4, lwd=2, main=paste(neurals, neurals_plot))
points(x, predict.nn, type='l', col=2, lwd=2)
}
par(mai=c(0,0,0,0))
plot.new()
legend(x="center", ncol=2,legend=c("Función predicha", "Función original"),
title="Leyenda", lty = c(1, NA), pch = c(NA, 'O'), col=c('red', 'blue'))
nf<-layout(matrix(c(1,2,3,4,5,6,7,8,9,10,11,11,11,11,11), ncol=5, byrow=TRUE))
par(mai= rep(0.3, 4))
for(neurals in seq(1,10)){
min <- min.nn(x, y, 10, neurals)
# Curva ajustada con el menor error entre varias ejecuciones de la
# función nnet
predict.nn<-predict(min, as.matrix(x))
# Representamos la función predicha junto con la función original
if(neurals == 1)
neurals_plot <-  "neurona"
else
neurals_plot <- "neuronas"
plot(x,y, col=4, lwd=2, main=paste(neurals, neurals_plot))
points(x, predict.nn, type='l', col=2, lwd=2)
}
par(mai=c(0,0,0,0))
plot.new()
legend(x="center", ncol=2,legend=c("Función predicha", "Función original"),
title="Leyenda", lty = c(1, NA), pch = c(NA, 'O'), col=c('red', 'blue'))
layout.show(nf)
nf<-layout(matrix(c(1,2,3,4,5,6,7,8,9,10,11,11,11,11,11), ncol=5,heights=c(4, 1), byrow=TRUE))
?layout
nf<-layout(matrix(c(1,2,3,4,5,6,7,8,9,10,11,11,11,11,11), ncol=5, heights=c(4, 4, 2), byrow=TRUE))
nf<-layout(matrix(c(1,2,3,4,5,6,7,8,9,10,11,11,11,11,11), ncol=5, heights=c(4, 4, 1), byrow=TRUE))
nf<-layout(matrix(c(1,2,3,4,5,6,7,8,9,10,11,11,11,11,11), ncol=5,byrow=TRUE, heights=c(4, 4, 1)))
nf <- layout(matrix(c(2,0,1,3),2,2,byrow=TRUE), widths=c(6,1), heights=c(1,6), TRUE)
layout.show(nf)
nf<-layout(matrix(c(1,2,3,4,5,6,7,8,9,10,11,11,11,11,11), ncol=5, byrow=TRUE))
layout.show(nf)
nf<-layout(matrix(c(1,2,3,4,5,6,7,8,9,10,11,11,11,11,11), ncol=5, byrow=TRUE))
par(mai= rep(0.5, 4))
for(neurals in seq(1,10)){
min <- min.nn(x, y, 10, neurals)
# Curva ajustada con el menor error entre varias ejecuciones de la
# función nnet
predict.nn<-predict(min, as.matrix(x))
# Representamos la función predicha junto con la función original
if(neurals == 1)
neurals_plot <-  "neurona"
else
neurals_plot <- "neuronas"
plot(x,y, col=4, lwd=2, main=paste(neurals, neurals_plot))
points(x, predict.nn, type='l', col=2, lwd=2)
}
par(mai=c(0,0,0,0))
plot.new()
legend(x="center", ncol=2,legend=c("Función predicha", "Función original"),
title="Leyenda", lty = c(1, NA), pch = c(NA, 'O'), col=c('red', 'blue'))
par(mfrow=c(1,2))
for(neurals in c(1,3)){
curve.nn <- neuralnet(y~x, cbind(x,y), hidden=neurals, rep=2, stepmax=10e6)
}
par(mfrow=c(1,1))
plot(x,y)
par(mfrow=c(1,2))
for(neurals in c(1,3)){
curve.nn <- neuralnet(y~x, cbind(x,y), hidden=neurals, rep=2, stepmax=10e6)
plot.nn(curve.nn)
}
dev.off()
par(mfrow=c(1,2))
for(neurals in c(1,3)){
curve.nn <- neuralnet(y~x, cbind(x,y), hidden=neurals, rep=2, stepmax=10e6)
plot.nn(curve.nn)
}
nf<-par(mfrow=c(1,2))
layout.show(nf)
par(mfrow=c(1,2))
par(mfrow=c(1,2))
for(neurals in c(1,3)){
curve.nn <- neuralnet(y~x, cbind(x,y), hidden=neurals, rep=2, stepmax=10e6)
plot.nn(curve.nn)
}
dev.off()
par(mfrow=c(1,2))
for(neurals in c(1,3)){
curve.nn <- neuralnet(y~x, cbind(x,y), hidden=neurals, rep=2, stepmax=10e6)
plot.nn(curve.nn)
}
par(mfrow=c(1,2))
for(neurals in c(1,3)){
curve.nn <- neuralnet(y~x, cbind(x,y), hidden=neurals, rep=2, stepmax=10e6)
plot.nnet(curve.nn)
}
for(neurals in c(1,3)){
curve.nn <- neuralnet(y~x, cbind(x,y), hidden=neurals, rep=2, stepmax=10e6, par=par(mfrow=c(1,2)))
plot.nn(curve.nn)
}
for(neurals in c(1,3)){
curve.nn <- neuralnet(y~x, cbind(x,y), hidden=neurals, rep=2, stepmax=10e6, par=mfrow=c(1,2))
plot.nn(curve.nn)
}
for(neurals in c(1,3)){
curve.nn <- neuralnet(y~x, cbind(x,y), hidden=neurals, rep=2, stepmax=10e6, par(mfrow=c(1,2))
plot.nn(curve.nn)
}
par(mfrow=c(1,2))
for(neurals in c(1,3)){
curve.nn <- neuralnet(y~x, cbind(x,y), hidden=neurals, rep=2, stepmax=10e6)
plot.nn(curve.nn)
}
par(mfrow=c(1,2))
for(neurals in c(1,3)){
curve.nn <- neuralnet(y~x, cbind(x,y), hidden=neurals, rep=1, stepmax=10e6)
plot.nn(curve.nn)
}
min.nn(x,y,10,4)
min.nn <- function(x,y, iter=10, neurals=5){
min_value <- 10e6 # Infinito
actual_fit <- NULL
for(i in seq(1, iter)){
fit.nn <- nnet(x,y, rang=0.1, size=neurals, linout=T, maxit=10000)
paste(fit.nn$value, "\n")
if(fit.nn$value < min_value){
min_value <- fit.nn$value
actual_fit <- fit.nn
}
}
return(actual_fit)
}
min.nn(x,y,10,4)
min.nn <- function(x,y, iter=10, neurals=5){
min_value <- 10e6 # Infinito
actual_fit <- NULL
for(i in seq(1, iter)){
fit.nn <- nnet(x,y, rang=0.1, size=neurals, linout=T, maxit=10000)
cat(fit.nn$value, "\n")
if(fit.nn$value < min_value){
min_value <- fit.nn$value
actual_fit <- fit.nn
}
}
return(actual_fit)
}
min.nn(x,y,10,4)
min$value
plot(x, min$residuals)
plot(x, predict(min, as.matrix(x))
)
nnet(x,y, rang=0.1, size=4, linout=T, maxit=10000)
a<-nnet(x,y, rang=0.1, size=4, linout=T, maxit=10000)
a$value
a<-nnet(x,y, rang=0.1, size=4, linout=T, maxit=10000)
a<-nnet(x,y, rang=0.1, size=4, linout=T, maxit=10000)
a<-nnet(x,y, rang=0.1, size=4, linout=T, maxit=10000)
a<-nnet(x,y, rang=0.1, size=4, linout=T, maxit=10000)
a<-nnet(x,y, rang=0.1, size=4, linout=T, maxit=10000)
a<-nnet(x,y, rang=0.1, size=4, linout=T, maxit=10000)
a<-nnet(x,y, rang=0.1, size=4, linout=T, maxit=10000)
a<-nnet(x,y, rang=0.1, size=4, linout=T, maxit=10000)
a<-nnet(x,y, rang=0.1, size=4, linout=T, maxit=10000)
a<-nnet(x,y, rang=0.1, size=4, linout=T, maxit=10000)
a<-nnet(x,y, rang=0.1, size=4, linout=T, maxit=10000)
a<-nnet(x,y, rang=0.1, size=4, linout=T, maxit=10000)
a<-nnet(x,y, rang=0.1, size=4, linout=T, maxit=10000)
a<-nnet(x,y, rang=0.1, size=4, linout=T, maxit=10000)
a<-nnet(x,y, rang=0.1, size=4, linout=T, maxit=10000)
a<-nnet(x,y, rang=0.1, size=4, linout=T, maxit=10000)
a<-nnet(x,y, rang=0.1, size=4, linout=T, maxit=10000)
a<-nnet(x,y, rang=0.1, size=4, linout=T, maxit=10000)
a<-nnet(x,y, rang=0.1, size=4, linout=T, maxit=10000)
a<-nnet(x,y, rang=0.1, size=4, linout=T, maxit=10000)
a<-nnet(x,y, rang=0.1, size=4, linout=T, maxit=10000)
a<-nnet(x,y, rang=0.1, size=4, linout=T, maxit=10000)
a<-nnet(x,y, rang=0.1, size=4, linout=T, maxit=10000)
a<-nnet(x,y, rang=0.1, size=4, linout=T, maxit=10000)
a<-nnet(x,y, rang=0.1, size=4, linout=T, maxit=10000)
a<-nnet(x,y, rang=0.1, size=4, linout=T, maxit=10000)
a<-nnet(x,y, rang=0.1, size=4, linout=T, maxit=10000)
a<-nnet(x,y, rang=0.1, size=4, linout=T, maxit=10000)
a<-nnet(x,y, rang=0.1, size=4, linout=T, maxit=10000)
a<-nnet(x,y, rang=0.1, size=4, linout=T, maxit=10000)
a<-nnet(x,y, rang=0.1, size=4, linout=T, maxit=10000)
a<-nnet(x,y, rang=0.1, size=4, linout=T, maxit=10000)
a<-nnet(x,y, rang=0.1, size=4, linout=T, maxit=10000)
neuralnet(y~x, cbind(x,y), hidden=neurals,
rep=1, stepmax=10e6)
Var1 <- rpois(100,0.5)
Var2 <- rbinom(100,2,0.6)
Var3 <- rbinom(100,1,0.5)
SUM <- as.integer(abs(Var1+Var2+Var3+(rnorm(100))))
sum.data <- data.frame(Var1+Var2+Var3, SUM)
print(net.sum <- neuralnet( SUM~Var1+Var2+Var3, sum.data, hidden=1,
act.fct="tanh"))
main <- glm(SUM~Var1+Var2+Var3, sum.data, family=poisson())
full <- glm(SUM~Var1*Var2*Var3, sum.data, family=poisson())
prediction(net.sum, list.glm=list(main=main, full=full))
plot(x,y, col=4, lwd=2)
points(x, curve.nn$response, type='l', col=2, lwd=2)
nf<-layout(matrix(c(1,2,3,4,5,6,7,8,9,10,11,11,11,11,11),
ncol=5, byrow=TRUE))
par(mai= rep(0.5, 4))
for(neurals in seq(1,10)){
min <- min.nn(x, y, 10, neurals)
mins[neurals] <- min
# Curva ajustada con el menor error entre varias ejecuciones
# de la función nnet
predict.nn<-predict(min, as.matrix(x))
# Representamos la función predicha junto con la función
# original
if(neurals == 1)
neurals_plot <-  "neurona"
else
neurals_plot <- "neuronas"
plot(x,y, col=4, lwd=2, main=paste(neurals, neurals_plot))
points(x, predict.nn, type='l', col=2, lwd=2)
}
par(mai=c(0,0,0,0))
plot.new()
legend(x="center", ncol=2,
legend=c("Función predicha", "Función original"),
title="Leyenda",
lty = c(1, NA),
pch = c(NA, 'O'),
col=c('red', 'blue'))
dev.off()
nf<-layout(matrix(c(1,2,3,4,5,6,7,8,9,10,11,11,11,11,11),
ncol=5, byrow=TRUE))
par(mai= rep(0.5, 4))
for(neurals in seq(1,10)){
min <- min.nn(x, y, 10, neurals)
mins[neurals] <- min
# Curva ajustada con el menor error entre varias ejecuciones
# de la función nnet
predict.nn<-predict(min, as.matrix(x))
# Representamos la función predicha junto con la función
# original
if(neurals == 1)
neurals_plot <-  "neurona"
else
neurals_plot <- "neuronas"
plot(x,y, col=4, lwd=2, main=paste(neurals, neurals_plot))
points(x, predict.nn, type='l', col=2, lwd=2)
}
par(mai=c(0,0,0,0))
plot.new()
legend(x="center", ncol=2,
legend=c("Función predicha", "Función original"),
title="Leyenda",
lty = c(1, NA),
pch = c(NA, 'O'),
col=c('red', 'blue'))
mins <- vector()
for(neurals in seq(1,10)){
min <- min.nn(x, y, 10, neurals)
mins[neurals] <- min
# Curva ajustada con el menor error entre varias ejecuciones
# de la función nnet
predict.nn<-predict(min, as.matrix(x))
# Representamos la función predicha junto con la función
# original
if(neurals == 1)
neurals_plot <-  "neurona"
else
neurals_plot <- "neuronas"
plot(x,y, col=4, lwd=2, main=paste(neurals, neurals_plot))
points(x, predict.nn, type='l', col=2, lwd=2)
}
par(mai=c(0,0,0,0))
plot.new()
legend(x="center", ncol=2,
legend=c("Función predicha", "Función original"),
title="Leyenda",
lty = c(1, NA),
pch = c(NA, 'O'),
col=c('red', 'blue'))
par(mfrow=c(1,1))
plot(x,y)
mins <- vector()
for(neurals in seq(1,10)){
min <- min.nn(x, y, 10, neurals)
mins[neurals] <- min
# Curva ajustada con el menor error entre varias ejecuciones
# de la función nnet
predict.nn<-predict(min, as.matrix(x))
# Representamos la función predicha junto con la función
# original
if(neurals == 1)
neurals_plot <-  "neurona"
else
neurals_plot <- "neuronas"
plot(x,y, col=4, lwd=2, main=paste(neurals, neurals_plot))
points(x, predict.nn, type='l', col=2, lwd=2)
}
nf<-layout(matrix(c(1,2,3,4,5,6,7,8,9,10,11,11,11,11,11),
ncol=5, byrow=TRUE))
par(mai= rep(0.5, 4))
mins <- vector()
for(neurals in seq(1,10)){
min <- min.nn(x, y, 10, neurals)
mins[neurals] <- min
# Curva ajustada con el menor error entre varias ejecuciones
# de la función nnet
predict.nn<-predict(min, as.matrix(x))
# Representamos la función predicha junto con la función
# original
if(neurals == 1)
neurals_plot <-  "neurona"
else
neurals_plot <- "neuronas"
plot(x,y, col=4, lwd=2, main=paste(neurals, neurals_plot))
points(x, predict.nn, type='l', col=2, lwd=2)
}
par(mai=c(0,0,0,0))
plot.new()
legend(x="center", ncol=2,
legend=c("Función predicha", "Función original"),
title="Leyenda",
lty = c(1, NA),
pch = c(NA, 'O'),
col=c('red', 'blue'))
# Cargamos la librería neuralnet
library(neuralnet)
# Representamos la red con 1 y 3 neuronas
par(mfrow=c(1,2))
for(neurals in c(1,3)){
curve.nn <- neuralnet(y~x, cbind(x,y), hidden=neurals,
rep=1, stepmax=10e6)
plot.nn(curve.nn)
}
nf<-layout(matrix(c(1,2,3,4,5,6,7,8,9,10,11,11,11,11,11),
ncol=5, byrow=TRUE))
par(mai= rep(0.5, 4))
mins <- vector()
for(neurals in seq(1,10)){
# Curva ajustada con el menor error entre varias ejecuciones
# de la función nnet
min <- min.nn(x, y, 10, neurals)
mins[neurals] <- min
# Predicción de los valores a partir de la red calculada
predict.nn<-predict(min, as.matrix(x))
# Representamos la función predicha junto con la función
# original
if(neurals == 1)
neurals_plot <-  "neurona"
else
neurals_plot <- "neuronas"
plot(x,y, col=4, lwd=2, main=paste(neurals, neurals_plot))
points(x, predict.nn, type='l', col=2, lwd=2)
}
par(mai=c(0,0,0,0))
plot.new()
legend(x="center", ncol=2,
legend=c("Función predicha", "Función original"),
title="Leyenda",
lty = c(1, NA),
pch = c(NA, 'O'),
col=c('red', 'blue'))
mins[1]
mins[[1]]
nf<-layout(matrix(c(1,2,3,4,5,6,7,8,9,10,11,11,11,11,11),
ncol=5, byrow=TRUE))
par(mai= rep(0.5, 4))
predictions <- vector()
for(neurals in seq(1,10)){
# Curva ajustada con el menor error entre varias ejecuciones
# de la función nnet
min <- min.nn(x, y, 10, neurals)
# Predicción de los valores a partir de la red calculada
predict.nn<-predict(min, as.matrix(x))
predictions[neurals] <- predict.nn
# Representamos la función predicha junto con la función
# original
if(neurals == 1)
neurals_plot <-  "neurona"
else
neurals_plot <- "neuronas"
plot(x,y, col=4, lwd=2, main=paste(neurals, neurals_plot))
points(x, predict.nn, type='l', col=2, lwd=2)
}
par(mai=c(0,0,0,0))
plot.new()
legend(x="center", ncol=2,
legend=c("Función predicha", "Función original"),
title="Leyenda",
lty = c(1, NA),
pch = c(NA, 'O'),
col=c('red', 'blue'))
predict.nn
predictions[11]<-predict.nn
predictions[10]<-predict.nn
